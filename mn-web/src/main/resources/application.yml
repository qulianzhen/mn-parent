server:
  port: 8080
  session-timeout: 30
  servlet:
    context-path: /mn-web
  tomcat:
    #处理类型：  1计算（主要消耗cpu），2等待（io、数据库等）
    max-threads: 200 #默认值 (tomcat起动的最大线程数，即同时处理的任务个数,超过后会放入等待队列)
    accept-count: 100 #默认值(当tomcat起动的线程数达到最大时，接受排队的请求个数,超过或会拒绝此次请求，返回connection refused)
    uri-encoding: UTF-8

spring:
  application:
    name: mn-web
  datasource:
    name: mn-web
    type: com.alibaba.druid.pool.DruidDataSource
    #url: jdbc:mysql://127.0.0.1:3306/mn?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&useSSL=false
    #driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      #驱动包用的是mysql-connector-java-8.0.11.jar ,新版的驱动类改成了com.mysql.cj.jdbc.Driver ,
      #新版驱动连接url也有所改动 ,需要指定时区，如果你设置serverTimezone=UTC，用java代码插入到数据库时间的时候会出现问题
      #比如在java代码里面插入的时间为：2018-06-24 17:29:56 ，但是在数据库里面显示的时间却为：2018-06-24 09:29:56
      #有了8个小时的时差
      #UTC代表的是全球标准时间 ，但是我们使用的时间是北京时区也就是东八区，领先UTC八个小时
      #可以用： 北京时间东八区 serverTimezone=GMT%2B8   或者使用上海时间 serverTimezone=Asia/Shanghai
      #useSSL：指定是否用ssl连接
      #url: jdbc:mysql://127.0.0.1:3306/mn?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&useSSL=false
      url: jdbc:mysql://127.0.0.1:3306/mn?useUnicode=true&amp;characterEncoding=UTF-8&allowMultiQueries=true
      username: root
      password: 123456
      #driver-class-name: com.mysql.cj.jdbc.Driver
      driver-class-name: com.mysql.jdbc.Driver
      initial-size: 5 #初始化连接数 5 -官网推荐（还需要结合服务器性能）
      min-idle: 10  #最小  去除了混淆的概念，就相当于最小连接数
      max-active: 20 #最大连接数量 公式：((核心数 * 2) + 有效磁盘数)
      max-wait: 60000  #超时等待时间以毫秒为单位 60000毫秒/1000等于60秒
      time-between-eviction-runs-millis: 2000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 600000 #配置一个连接在池中最小生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 2000000 #配置一个连接在池中最大生存的时间，单位是毫秒
      validation-query: "select 1"
      #validation-query-timeout:

      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      keep-alive: true
      phy-timeout-millis: 100000
      #监控配置：通过指定过滤器为StatFilter的别名(stat)来实现监控
      filters: stat,wall,log4j2  #wall是一种防范sql注入的过滤器
      filter:
        stat:
          merge-sql: true #SQL合并配置  不同参数的同一个sql将会被合并为一条
          slow-sql-millis: 3000  #慢sql记录，超过3秒就当成慢sql
          log-slow-sql: true #记录慢sql
        log4j2:
          statement-executable-sql-log-enable: true #输出可执行的sql日志（参数合并到sql中）
        slf4j:
          enabled: true
          statement-close-after-log-enabled: false
          statement-create-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      stat-view-servlet: #配置监控组件的用户名和密码
        enabled: true
        login-username: qlz
        login-password: qlz
        url-pattern: /druid/*
        reset-enable: true
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: '*.gif,*.png,*.jpg,*.html,*.js,*.css,*.ico,/druid/*'
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 2000ms
    password: 123456
    lettuce:
      pool:
        max-active: 300 #连接池最大连接数（使用负值表示没有限制）
        max-idle: 200   #连接池中的最大空闲连接
        max-wait: 20s #连接池最大阻塞等待时间（使用负值表示没有限制）
        min-idle: 10  #连接池中的最小空闲连接
      #sentinel: #哨兵 设置
        #master: Name of Redis server
        #nodes: Comma-separated list of host:port pairs

#测试属性赋值
person:
  lastName: zhangsan
  age: 20
  boss: false
  birth: 2018/12/12
  mapObj: {key1: v1,key2: 12}
  lists:
    - lisi
    - zhaoliu
  dog:
    name: 旺财
    age: 2
#通用Mapper的配置
mybatis:
  #扫描实体类的所在包
  type-aliases-package: com.mn.**.entity
  #如果不是纯注解方式，需要指定mapper接口对应的.xml文件
  mapper-locations: classpath:mapper/**/*Mapper.xml
mapper:
  #通用mapper的所在接口名称
  mappers: com.mn.commonbean.tkmapper.MyMapper
  # 取回主键的方式 MYSQL: SELECT LAST_INSERT_ID()
  identity: MYSQL
  order: AFTER   # 还可设置为 mapper.before = false ;AFTER 表示 SELECT LAST_INSERT_ID() 在insert执行之后执行,多用与自增主键
                  #BEFORE 表示 SELECT LAST_INSERT_ID() 在insert执行之前执行，这样的话就拿不到主键了，这种适合那种主键不是自增的类型
  not-empty: true # insertSelective 和 updateByPrimaryKeySelective 中，是否判断字符串类型 !=''
  style: camelhumpAndLowercase # 实体和表转换时的默认规则:驼峰转下划线小写形式
  enableMethodAnnotation: true # 是否支持（getter 和 setter）在方法上使用注解，默认false
  enumAsSimpleType: true # 枚举类型当成基本类型对待

#分页插件
pagehelper:
  #指定类型
  helper-dialect: mysql
  #开启合理化：如果页码小于1，查询第一页，如果大于最后一页，查询最后一页
  reasonable: true
  #使用该分页插件有两种方式，静态方法设置pageSize和PageNum，或者是调用查询方法的时候，传入pageSize等参数
  #然后插件会自动判断传入的参数中有没有这些关键参数， 这个设置就是控制是否开启这种功能，下面的params就是
  #参数的指定；如List<country> selectByPageNumSize(UserDTO user,int pageNum, int pageSize);
  support-methods-arguments: false
  params: pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
#log配置,采用log4j2
logging:
  config: classpath:log4j2_dev.xml

#控制swagger的自定义配置属性
swagger:
  # swagger-ui.html开关：true，开启；false，关闭
  show: true

#设定雪花算法机器码和数据中心码
snowflake:
  machineId: 1
  datacenterId: 1

#token 配置
token:
  #token名称
  tokenName: X-TOKEN
  #超时时间-分钟
  timeout: 5
  #是否自动刷新
  refresh: true
  #token秘钥
  secret: 90kpo1?_230_a451x
  #userflg
  userflg: X-SUBJECT



